SELECT * FROM EMPLOYEES;

SELECT * FROM TBL_PHONE;
SELECT * FROM TBL_CASE;

/* 부모 테이블에서 데이터 삭제하기 */
DELETE FROM TBL_PHONE
WHERE PHONE_SERIAL_NUMBER = 'S23-004';

/* 부모 테이블의 데이터를 삭제하려면 자식테이블의 참조중인 값들을 먼저 처리해야한다.
 * 1. 삭제한다.
 * 2. 수정한다.
 */

-- 1.
DELETE FROM TBL_CASE 
WHERE PHONE_SERIAL_NUMBER = 'S23-004';

DELETE FROM TBL_PHONE 
WHERE PHONE_SERIAL_NUMBER = 'S23-004';

SELECT * FROM TBL_PHONE;
SELECT * FROM TBL_CASE;

/* 회원 정보 추가 
 * 책 정보 추가
 * 회원 이름 수정
 * 책 대여 하기
 * 책 대여한 회원 번호 수정
 * 회원 삭제
 */

DELETE FROM TBL_MEMBER;
DELETE FROM TBL_BOOK;

-- 회원 정보 추가
INSERT INTO TBL_MEMBER
(MEMBER_NUMBER, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE_NUMBER, MEMBER_ADDRESS)
VALUES(1, '류호근', 22, '010-1234-1234', '서울시');

INSERT INTO TBL_MEMBER
(MEMBER_NUMBER, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE_NUMBER, MEMBER_ADDRESS)
VALUES(2, '문동은', 30, '010-4567-4567', '세명시');

INSERT INTO TBL_MEMBER
(MEMBER_NUMBER, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE_NUMBER, MEMBER_ADDRESS)
VALUES(3, '박연진', 30, '010-1111-1111', '세명시');

SELECT * FROM TBL_MEMBER;

-- 책 정보 추가
INSERT INTO TBL_BOOK
(BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, MEMBER_NUMBER)
VALUES(1, 'DO IT SQL', 'IT', NULL);

INSERT INTO TBL_BOOK
(BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, MEMBER_NUMBER)
VALUES(2, '그리고 아무도 없었다', '추리', NULL);

INSERT INTO TBL_BOOK
(BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, MEMBER_NUMBER)
VALUES(3, '미움 받을 용기', '인문학', NULL);

SELECT * FROM TBL_BOOK;

-- 회원 이름 수정
UPDATE TBL_MEMBER  
SET MEMBER_NAME = '주여정'
WHERE MEMBER_NUMBER = 3;

SELECT * FROM TBL_MEMBER;

-- 책 대여 하기
UPDATE TBL_BOOK  
SET MEMBER_NUMBER = 1
WHERE BOOK_NUMBER = 2;

UPDATE TBL_BOOK  
SET MEMBER_NUMBER = 1
WHERE BOOK_NUMBER = 3;

UPDATE TBL_BOOK 
SET MEMBER_NUMBER = 2
WHERE BOOK_NUMBER = 1;

-- 책 대여한 회원 번호 수정
SELECT * FROM TBL_BOOK;

UPDATE TBL_BOOK  
SET MEMBER_NUMBER = NULL
WHERE MEMBER_NUMBER = 2;

UPDATE TBL_MEMBER 
SET MEMBER_NUMBER = 4
WHERE MEMBER_NUMBER = 2;

-- 회원 삭제
UPDATE TBL_BOOK 
SET MEMBER_NUMBER = NULL
WHERE MEMBER_NUMBER = 1;

DELETE FROM TBL_MEMBER 
WHERE MEMBER_NUMBER = 1;

SELECT * FROM TBL_MEMBER;
SELECT * FROM TBL_BOOK;

--=================================================================
-- 시퀀스
CREATE SEQUENCE SEQ_MEMBER;
CREATE SEQUENCE SEQ_BOOK;

-- 테이블 데이터 모두 삭제
DELETE FROM TBL_MEMBER;
DELETE FROM TBL_BOOK;

-- 시퀀스 사용하여 데이터 넣기
INSERT INTO TBL_MEMBER
(MEMBER_NUMBER, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE_NUMBER, MEMBER_ADDRESS)
VALUES(SEQ_MEMBER.NEXTVAL, '류호근', 22, '010-1234-1234', '서울시');

INSERT INTO TBL_MEMBER
(MEMBER_NUMBER, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE_NUMBER, MEMBER_ADDRESS)
VALUES(SEQ_MEMBER.NEXTVAL, '문동은', 30, '010-4567-4567', '세명시');

INSERT INTO TBL_MEMBER
(MEMBER_NUMBER, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE_NUMBER, MEMBER_ADDRESS)
VALUES(SEQ_MEMBER.NEXTVAL, '박연진', 30, '010-1111-1111', '세명시');

SELECT * FROM TBL_MEMBER;

-- 책 정보 추가
INSERT INTO TBL_BOOK
(BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, MEMBER_NUMBER)
VALUES(SEQ_BOOK.NEXTVAL, 'DO IT SQL', 'IT', NULL);

INSERT INTO TBL_BOOK
(BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, MEMBER_NUMBER)
VALUES(SEQ_BOOK.NEXTVAL, '그리고 아무도 없었다', '추리', NULL);

INSERT INTO TBL_BOOK
(BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, MEMBER_NUMBER)
VALUES(SEQ_BOOK.NEXTVAL, '미움 받을 용기', '인문학', NULL);

SELECT * FROM TBL_BOOK;

/* 삭제 시 참조중인 자식 FK가 있으면, 자식부터 지워야 한다.
 * 하지만 이러한 번거로운 작업을 해결하기 위해 FK 제약조건 뒤에
 * ON DELETE CASCADE 옵션을 작성할 수 있다.
 * 해당 옵션이 추가되면, 부모 삭제 시 참조중인 모든 자식 데이터가 자동으로 삭제된다.
 */

ALTER TABLE TBL_BOOK 
DROP CONSTRAINT FK_BOOK;

ALTER TABLE TBL_BOOK 
ADD CONSTRAINT FK_BOOK FOREIGN KEY(MEMBER_NUMBER)
REFERENCES TBL_MEMBER(MEMBER_NUMBER) ON DELETE CASCADE;

SELECT * FROM TBL_BOOK;

-- 책 대여하기
UPDATE TBL_BOOK 
SET MEMBER_NUMBER = 1
WHERE BOOK_NUMBER = 1;

UPDATE TBL_BOOK 
SET MEMBER_NUMBER = 2
WHERE BOOK_NUMBER = 3;

-- 회원 삭제해서 ON DELETE CASCADE 잘 작동되는지 확인
DELETE FROM TBL_MEMBER
WHERE MEMBER_NUMBER = 1; 

SELECT BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, NVL(MEMBER_NUMBER, 0)
FROM TBL_BOOK;

SELECT BOOK_NUMBER, BOOK_NAME, BOOK_CATEGORY, NVL2(MEMBER_NUMBER, '대여 중', '대여 가능')
FROM TBL_BOOK;

SELECT TB.*, NVL2(MEMBER_NUMBER, '대여 중', '대여 가능') 상태
FROM TBL_BOOK TB;

--=====================================================================================
SELECT * FROM PLAYER;

/* PLAYER 테이블에서 TEAM_ID 가 'K01'인 선수 조회 */
SELECT * FROM PLAYER 
WHERE TEAM_ID = 'K01';

-- PLAYER 테이블에서 WEIGHT가 70이상이고 80이하인 선수 검색
SELECT *
FROM PLAYER 
WHERE WEIGHT BETWEEN 70 AND 80;

-- PLAYER 테이블에서 TEAM_ID가 'K03'이고 HEIGHT가 180 미만인 선수 검색
SELECT *
FROM PLAYER 
WHERE TEAM_ID = 'K03' AND HEIGHT < 180;

-- PLAYER 테이블에서 TEAM_ID가 'K06'이고 NICKNAME이 '제리'인 선수 검색
SELECT * 
FROM PLAYER 
WHERE TEAM_ID = 'K06' AND NICKNAME = '제리';

-- PLAYER 테이블에서 HEIGHT가 170이상이고 WEIGHT가 80이상인 선수 이름 검색
SELECT PLAYER_NAME 
FROM PLAYER 
WHERE HEIGHT >= 170 AND WEIGHT >= 80;

-- STADIUM 테이블에서 SEAT_COUNT가 30000초과이고 41000이하인 경기장 검색
SELECT *
FROM STADIUM
WHERE SEAT_COUNT > 30000 AND SEAT_COUNT <= 41000;

-- PLAYER 테이블에서 TEAM_ID가 'K02'이거나 'K07'이고 포지션은 'MF'인 선수 검색
SELECT *
FROM PLAYER 
WHERE (TEAM_ID = 'K02' OR TEAM_ID = 'K07') AND "POSITION" = 'MF';

/* OR 보다 AND가 우선순위가 높다. 그러므로 괄호로 묶어준다.
 * POSITION 은 예약어이므로 쌍따옴표로 묶어서 사용한다.
 * IN() 을 사용해도 된다.
 */
SELECT *
FROM PLAYER 
WHERE TEAM_ID IN('K02', 'K07') AND "POSITION" = 'MF';
--==================================================================
-- TCL : 트랜잭션 제어어

/* 롤백 테스트
 * PLAYER 테이블에서 TEAM_ID 가 'K01'인 선수 이름을 내 이름으로 바꾸기
 * 단, 매뉴얼 커밋이어야 한다!!
 * */
UPDATE PLAYER  
SET PLAYER_NAME = '양현'
WHERE TEAM_ID = 'K01';

SELECT * FROM PLAYER 
WHERE TEAM_ID = 'K01';

/* PLAYER 테이블에서 POSITION이 NULL인 선수 검색 */
SELECT * FROM PLAYER 
WHERE "POSITION" IS NULL;

/* PLAYER 테이블에서 NICKNAME이 NULL인 선수를 '없음'으로 변경하여
 * 조회하기 
 */

SELECT P.*, NVL(NICKNAME, '없음') "닉네임 여부"
FROM PLAYER P;

SELECT PLAYER_ID, PLAYER_NAME, TEAM_ID, E_PLAYER_NAME, NVL(NICKNAME, '없음') NICKNAME, JOIN_YYYY, "POSITION", BACK_NO, NATION, BIRTH_DATE, SOLAR, HEIGHT, WEIGHT
FROM PLAYER;

/* PLAYER 테이블에서 NATION이 등록되어 있으면 '등록', 아니면 '미등록' 으로 검색 */
SELECT PLAYER_NAME, NVL2(NATION, '등록', '미등록') "국가 등록 여부", NATION
FROM PLAYER;

